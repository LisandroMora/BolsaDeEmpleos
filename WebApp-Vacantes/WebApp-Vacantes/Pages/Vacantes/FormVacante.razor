@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject HttpClient Http
@inject IWebHostEnvironment env
@attribute [Authorize(Roles = "admin, postulante")]


<style>
    form .row {
        margin-bottom: 16px;
    }
</style>


<RadzenTemplateForm Data="@Trabajos" onsubmit="@OnValidSubmit">
    <div class="row">
        <RadzenFieldset Text="Fomulario de Vacante">
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Text="Categoria: " />
                </div>
                <div class="col-md-9">
                    <RadzenDropDown @bind-Value="Trabajos.IdCategoria" AllowClear="true" Placeholder="Seleccione una categoria" Data="@categoriasList" style="width: 100%;" TextProperty="Nombre" ValueProperty="IdCategoria" Name="IdCategoria">
                    </RadzenDropDown>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Text="Ubicacion: " />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="width: 100%;" Name="Ubicacion" @bind-Value="Trabajos.Ubicacion" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Text="Fecha: " />
                </div>
                <div class="col-md-9">
                    <RadzenDatePicker style="width: 100%;" Name="Fecha" @bind-Value="Trabajos.Fecha" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Text="Tipo: " />
                </div>
                <div class="col-md-9 d-flex justify-content-between align-items-center">
                    <InputRadioGroup Name="Tipo" @bind-Value="@Trabajos.IdTipo">
                        <InputRadio Name="Tipo" Value="1" />Full-Time
                        <InputRadio Name="Tipo" Value="2" />Part-Time
                        <InputRadio Name="Tipo" Value="3" />Freelancer
                    </InputRadioGroup>
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="Posicion: " />
                </div>
                <div class="col-md-3">
                    <RadzenTextBox style="width: 100%;" Name="OrderDate" @bind-Value="@Trabajos.Posicion" />
                </div>
                <div class="align-items-center d-flex col-md-2">
                    <RadzenLabel Text="Empresa: " />
                </div>
                <div class="col-md-4">
                    <RadzenTextBox style="width: 100%;" Name="ShipDate" @bind-Value="@Trabajos.Empresa" />
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="Email" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="width: 100%;" Name="Email" @bind-Value=@Trabajos.Email />
                    <RadzenRequiredValidator Component="Email" Text="Email es requirido" Popup=@popup Style="position: absolute" />
                    <RadzenEmailValidator Component="Email" Text="El email no es valido" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="Como aplicar: " />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Placeholder="Ej: Mandar CV al email" style="width: 100%;" Name="Register" />
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="URL: " />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Placeholder="URL de la vacante" style="width: 100%;" Name="Register" />
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="Logo: " />
                </div>
                <div class="col-md-9">
                    <InputFile OnChange="@OnInputFileChange" />
                </div>
            </div>
            <div class="row">
                <div class="align-items-center d-flex col-md-3">
                    <RadzenLabel Text="Descripcion: " />
                </div>
                <div class="col-md-9">
                    <RadzenTextArea style="width: 100%;" Placeholder="Ingrese la descripcion de la vacante..." @bind-Value="@Trabajos.Descripcion" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
    <button type="submit" class="btn btn-success btn-block w-75 mx-auto">@TextBtn</button>
    <DataAnnotationsValidator />
</RadzenTemplateForm>


@code {

    [Parameter] public Trabajos Trabajos { get; set; } = new Trabajos();
    [Parameter] public string TextBtn { get; set; } = "Guardar Cambios";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public IBrowserFile selectedFiles { get; set; }

    Categoria[] categorias { get; set; }

    List<Categoria> categoriasList = new List<Categoria>();

    bool popup;


    protected override async Task OnInitializedAsync()
    {
        await CargarCategorias();
    }

    async Task CargarCategorias()
    {
        categorias = await Http.GetFromJsonAsync<Categoria[]>("/api/Categoria");
        categoriasList = new List<Categoria>(categorias);
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;
        this.StateHasChanged();
        OnSubmitFile();
    }

    private async void OnSubmitFile()
    {
        Stream stream = selectedFiles.OpenReadStream();
        var path = $"{env.WebRootPath}\\logos\\{selectedFiles.Name}";
        Trabajos.UrlString = selectedFiles.Name;
        FileStream fs = File.Create(path);
        await stream.CopyToAsync(fs);
        stream.Close();
        fs.Close();
        this.StateHasChanged();
    }

}
